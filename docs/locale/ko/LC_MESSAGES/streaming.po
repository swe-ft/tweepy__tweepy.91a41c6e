# streaming.po - Streaming
# Copyright (C) 2009-2022, Joshua Roesslein
# This file is distributed under the same license as the tweepy package.
# 악동분홍토끼 <pinkrabbit412@daum.net>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tweepy 4.4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 05:35+0900\n"
"PO-Revision-Date: 2022-01-08 05:11+0900\n"
"Last-Translator: 악동분홍토끼 <pinkrabbit412@daum.net>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../streaming.rst:7
msgid "Streaming"
msgstr "스트리밍"

#: ../../streaming.rst:9
msgid ""
":class:`Stream` allows `filtering`_ and `sampling`_ of realtime Tweets "
"using Twitter's API."
msgstr ""
":class:`Stream` 클래스는 트위터 API를 이용해, 실시간 트윗에 대한 `필터링(Filtering)`_ 과 "
"`샘플링(Sampling)`_ 을 지원합니다. "

#: ../../streaming.rst:15
msgid ""
"Streams utilize Streaming HTTP protocol to deliver data through an open, "
"streaming API connection. Rather than delivering data in batches through "
"repeated requests by your client app, as might be expected from a REST "
"API, a single connection is opened between your app and the API, with new"
" results being sent through that connection whenever new matches occur. "
"This results in a low-latency delivery mechanism that can support very "
"high throughput. For further information, see "
"https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data"
msgstr ""
"스트림은 스트리밍 HTTP 프로토콜을 이용하며, 스트리밍 API 연결을 통해데이터를 전송합니다. REST API에서 볼 수 있듯 "
"클라이언트 앱과 API가 매 요청마다 다량의 데이터를 전송하는 대신, 앱과 API가 단일 연결을 구성하고 새 요청이 발생할 때마다 "
"해당 요청과 그에 대한 결과만을 주고받습니다. 이와 같은 방식을 이용하면 높은 처리량을 요하는 작업을 낮은 지연시간으로 수행할 수 "
"있습니다. 더 자세한 정보는 다음 URL을 참고하세요. "
"https://developer.twitter.com/en/docs/tutorials/consuming-streaming-data"

#: ../../streaming.rst:25
msgid "Using :class:`Stream`"
msgstr ":class:`Stream` 클래스 사용하기"

#: ../../streaming.rst:27
msgid ""
"To use :class:`Stream`, an instance of it needs to be initialized with "
"Twitter API credentials (Consumer Key, Consumer Secret, Access Token, "
"Access Token Secret)::"
msgstr ""
":class:`Stream` 클래스를 사용하려면, 해당 인스턴스가 트위터 API 자격증명으로 사전에 초기화되어 있어야 합니다. "
"(Consumer Key, Consumer Secret, Access Token, Access Token Secret)::"

#: ../../streaming.rst:38
msgid ""
"Then, :meth:`Stream.filter` or :meth:`Stream.sample` can be used to "
"connect to and run a stream::"
msgstr ""
"그러면, :meth:`Stream.filter` 메서드나 :meth:`Stream.sample` 메서드를 사용해, 스트림에 "
"연결하거나 스트림을 실행할 수 있습니다::"

#: ../../streaming.rst:43
msgid ""
"Data received from the stream is passed to :meth:`Stream.on_data`. This "
"method handles sending the data to other methods based on the message "
"type. For example, if a Tweet is received from the stream, the raw data "
"is sent to :meth:`Stream.on_data`, which constructs a :class:`Status` "
"object and passes it to :meth:`Stream.on_status`. By default, the other "
"methods, besides :meth:`Stream.on_data`, that receive the data from the "
"stream, simply log the data received, with the `logging level`_ dependent"
" on the type of the data."
msgstr ""
"스트림에서 수신된 데이터는 :meth:`Stream.on_data` 메서드로 전달됩니다. 이 메서드는 메세지 유형을 기반으로, "
"데이터를 다른 메서드로 보내는 작업을 담당합니다. 예로, 스트림을 통해 트윗을 받은 경우 이에 대한 RAW 데이터가 "
":meth:`Stream.on_data` 로 전달되며, 이는 :class:`Status` 객체를 만들고 이 객체를 "
":meth:`Stream.on_status` 로 전달합니다. 기본적으로 스트림에서 데이터를 받아오는 "
":meth:`Stream.on_data` 외의 다른 메서드는, 받아온 데이터의 유형과 관련된 `로깅 레벨(logging "
"level)`_ 에 따라 받아온 데이터를 단순히 로깅할 뿐입니다. "

#: ../../streaming.rst:53
msgid ""
"To customize the processing of the stream data, :class:`Stream` needs to "
"be subclassed. For example, to print the IDs of every Tweet received::"
msgstr ""
"스트림 데이터의 처리를 사용자 정의하려면, :class:`Stream` 클래스를 기반으로 서브클래스(상속과 같음)를 만들어야 "
"합니다. 예로, 받아온 트윗들의 ID를 모두 출력하려면 다음과 같은 소스코드를 사용하면 됩니다: "

#: ../../streaming.rst:69
msgid "Threading"
msgstr "스레딩"

#: ../../streaming.rst:70
msgid ""
"Both :meth:`Stream.filter` and :meth:`Stream.sample` have a ``threaded`` "
"parameter. When set to ``True``, the stream will run in a separate "
"`thread`_, which is returned by the call to either method. For example::"
msgstr ""
":meth:`Stream.filter` 와 :meth:`Stream.sample` 메서드는 모두 ``threaded`` 매개변수를 "
"갖습니다. ``True`` 로 설정된 경우, 스트림이 별도의 `스레드`_ 에서 동작하게 되며, 메서드 중 하나를 호출하면 결과값을 "
"반환하게 됩니다. 예시 소스코드는 다음과 같습니다: "

#: ../../streaming.rst:79
msgid "Handling Errors"
msgstr "오류(Error) 처리"

#: ../../streaming.rst:80
msgid ""
":class:`Stream` has multiple methods to handle errors during streaming. "
":meth:`Stream.on_closed` is called when the stream is closed by Twitter. "
":meth:`Stream.on_connection_error` is called when the stream encounters a"
" connection error. :meth:`Stream.on_request_error` is called when an "
"error is encountered while trying to connect to the stream. When these "
"errors are encountered and ``max_retries``, which defaults to infinite, "
"hasn't been exceeded yet, the :class:`Stream` instance will attempt to "
"reconnect the stream after an appropriate amount of time. By default, all"
" three of these methods log an error. To customize that handling, they "
"can be overridden in a subclass::"
msgstr ""
":class:`Stream` 클래스는 오류를 처리할 수 있는 여러 메서드를 가지고 있습니다. "
":meth:`Stream.on_closed` 메서드는 트위터에 의해 스트림이 닫힌 경우 호출됩니다. "
":meth:`Stream.on_connection_error` 메서드는 스트림에 연결 오류가 발생하면 호출됩니다. "
":meth:`Stream.on_request_error` 메서드는 스트림에 연결하고 있는 도중에 연결 오류가 발생하면 호출됩니다. "
"이러한 오류가 발생했으나 ``max_retries`` 회를 초과하여 시도하지 않은 경우(기본값은 무한대), "
":class:`Stream` 인스턴스는 적절한 시간 이후에 재연결을 시도할 것입니다. 기본적으로 이 세 개의 메서드는 모두 오류를 "
"로깅하며, 이러한 처리를 사용자 정의하려면 서브클래스를 만들어 재정의해야 합니다: "

#: ../../streaming.rst:95
msgid ""
":meth:`Stream.on_request_error` is also passed the HTTP status code that "
"was encountered. The HTTP status codes reference for the Twitter API can "
"be found at https://developer.twitter.com/en/support/twitter-api/error-"
"troubleshooting."
msgstr ""
":meth:`Stream.on_request_error` 메서드는 반환받은 HTTP 상태 코드도 반환합니다. 트위터 API에 대한 "
"HTTP 상태 코드 레퍼런스는 https://developer.twitter.com/en/support/twitter-api"
"/error-troubleshooting 을 참고하시기 바랍니다."

#: ../../streaming.rst:99
msgid ""
":meth:`Stream.on_exception` is called when an unhandled exception occurs."
" This is fatal to the stream, and by default, an exception is logged."
msgstr ""
"미리 처리하지 않은 예외가 발생하면 :meth:`Stream.on_exception` 메서드가 호출됩니다. 이는 스트림에 "
"치명적이며, 기본적으로 예외로서 로깅됩니다. "

