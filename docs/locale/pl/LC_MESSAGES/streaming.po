# Copyright (C) 2009-2020, Joshua Roesslein
# This file is distributed under the same license as the Tweepy package.
msgid ""
msgstr ""
"Project-Id-Version: Tweepy-pl\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-04-15 22:51+0200\n"
"PO-Revision-Date: 2021-04-28 15:37+0200\n"
"Last-Translator: kowalczyk-krzysztof <kowalczykkrzysztof893@gmail.com>\n"
"Language: pl\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"
"X-Generator: Poedit 2.4.2\n"

#: ../../streaming.rst:7
msgid "Streaming"
msgstr "Przesyłanie strumieniowe"

#: ../../streaming.rst:9
msgid ""
":class:`Stream` allows `filtering`_ and `sampling`_ of realtime Tweets "
"using Twitter's API."
msgstr ""
":class:`Stream` pozwala na `filtering`_ oraz `sampling`_ dla Tweetów w "
"czasie rzeczywistym używając API Twittera."

#: ../../streaming.rst:15
msgid ""
"Streams utilize Streaming HTTP protocol to deliver data through an open, "
"streaming API connection. Rather than delivering data in batches through "
"repeated requests by your client app, as might be expected from a REST "
"API, a single connection is opened between your app and the API, with "
"new results being sent through that connection whenever new matches "
"occur. This results in a low-latency delivery mechanism that can support "
"very high throughput. For futher information, see https://developer."
"twitter.com/en/docs/tutorials/consuming-streaming-data"
msgstr ""
"Strumienie wykorzystują protokół Streaming HTTP do dostarczania danych "
"poprzez otwarte, strumieniowe połączenie API. Zamiast dostarczać dane w "
"partiach przez powtarzające się żądania aplikacji klienta, jak można "
"oczekiwać od REST API, pojedyncze połączenie jest otwarte między "
"aplikacją a API, a nowe wyniki są wysyłane przez to połączenie, gdy "
"tylko wystąpią nowe dopasowania. Rezultatem tego jest mechanizm "
"dostarczania z niskim opóźnieniem, który może obsługiwać bardzo dużą "
"przepustowość. Aby uzyskać więcej informacji, zobacz https://developer."
"twitter.com/en/docs/tutorials/consuming-streaming-data"

#: ../../streaming.rst:25
msgid "Using :class:`Stream`"
msgstr "Używanie :class:`Stream`"

#: ../../streaming.rst:27
msgid ""
"To use :class:`Stream`, an instance of it needs to be initialized with "
"Twitter API credentials (Consumer Key, Consumer Secret, Access Token, "
"Access Token Secret)::"
msgstr ""
"Aby użyć :class:`Stream`, jego instancja musi być zainicjowana z danymi "
"uwierzytelniającymi API Twittera (Consumer Key, Consumer Secret, Access "
"Token, Access Token Secret)::"

#: ../../streaming.rst:38
msgid ""
"Then, :meth:`Stream.filter` or :meth:`Stream.sample` can be used to "
"connect to and run a stream::"
msgstr ""
"Następnie, :meth:`Stream.filter` lub :meth:`Stream.sample` mogą być "
"użyte do połączenia się i uruchomienia strumienia::"

#: ../../streaming.rst:43
msgid ""
"Data received from the stream is passed to :meth:`Stream.on_data`. This "
"method handles sending the data to other methods based on the message "
"type. For example, if a Tweet is received from the stream, the raw data "
"is sent to :meth:`Stream.on_data`, which constructs a :class:`Status` "
"object and passes it to :meth:`Stream.on_status`. By default, the other "
"methods, besides :meth:`Stream.on_data`, that receive the data from the "
"stream, simply log the data received, with the `logging level`_ "
"dependent on the type of the data."
msgstr ""
"Dane otrzymane ze strumienia są przekazywane do :meth:`Stream.on_data`. "
"Metoda ta zajmuje się wysyłaniem danych do innych metod w oparciu o typ "
"wiadomości. Na przykład, jeśli ze strumienia odbierany jest Tweet, "
"surowe dane są wysyłane do :meth:`Stream.on_data`, która konstruuje "
"obiekt :class:`Status` i przekazuje go do :meth:`Stream.on_status`. "
"Domyślnie, pozostałe metody, poza :meth:`Stream.on_data`, które "
"odbierają dane ze strumienia, po prostu logują otrzymane dane, z "
"poziomem `ogging level`_ zależnym od typu danych."

#: ../../streaming.rst:53
msgid ""
"To customize the processing of the stream data, :class:`Stream` needs to "
"be subclassed. For example, to print the IDs of every Tweet received::"
msgstr ""
"Aby dostosować przetwarzanie danych strumienia, :class:`Stream` musi "
"zostać podklasowane. Na przykład, aby zapisać ID każdego otrzymanego "
"Tweeta::"

#: ../../streaming.rst:69
msgid "Threading"
msgstr "Wątkowanie"

#: ../../streaming.rst:70
msgid ""
"Both :meth:`Stream.filter` and :meth:`Stream.sample` have a ``threaded`` "
"parameter. When set to ``True``, the stream will run in a separate "
"`thread`_, which is returned by the call to either method. For example::"
msgstr ""
"Zarówno :meth:`Stream.filter` jak i :meth:`Stream.sample` posiadają "
"parametr ``threaded``. Kiedy ustawiony jest na ``True``, strumień będzie "
"działał w oddzielnym ``thread``, który jest zwracany przez wywołanie "
"którejkolwiek z metod. Na przykład::odpowiednia ilość czasu. Domyślnie, "
"wszystkie trzy z tych metod rejestrują błąd. Aby dostosować obsługę, "
"mogą one zostać nadpisane w podklasie::"

#: ../../streaming.rst:79
msgid "Handling Errors"
msgstr "Obsługa błędów"

#: ../../streaming.rst:80
msgid ""
":class:`Stream` has multiple methods to handle errors during streaming. :"
"meth:`Stream.on_closed` is called when the stream is closed by Twitter. :"
"meth:`Stream.on_connection_error` is called when the stream encounters a "
"connection error. :meth:`Stream.on_request_error` is called when an "
"error is encountered while trying to connect to the stream. When these "
"errors are encountered and ``max_retries``, which defaults to infinite, "
"hasn't been exceeded yet, the :class:`Stream` instance will attempt to "
"reconnect the stream after an appropriate amount of time. By default, "
"all three of these methods log an error. To customize that handling, "
"they can be overriden in a subclass::"
msgstr ""
":class:`Stream` posiada wiele metod do obsługi błędów podczas "
"strumieniowania. :meth:`Stream.on_closed` jest wywoływany, gdy strumień "
"jest zamykany przez Twittera. :meth:`Stream.on_connection_error` jest "
"wywoływany, gdy strumień napotka błąd połączenia. :meth:`Stream."
"on_request_error` jest wywoływany, gdy napotkany zostanie błąd podczas "
"próby połączenia się ze strumieniem. Kiedy te błędy są napotkane i "
"``max_retries``, który domyślnie jest nieskończony, nie został jeszcze "
"przekroczony, instancja :class:`Stream` będzie próbowała ponownie "
"połączyć się ze strumieniem po odpowiednim czasie. Domyślnie, wszystkie "
"trzy z tych metod rejestrują błąd. Aby dostosować obsługę, mogą one "
"zostać nadpisane w podklasie::"

#: ../../streaming.rst:95
msgid ""
":meth:`Stream.on_request_error` is also passed the HTTP status code that "
"was encountered. The HTTP status codes reference for the Twitter API can "
"be found at https://developer.twitter.com/en/support/twitter-api/error-"
"troubleshooting."
msgstr ""
":meth:`Stream.on_request_error` jest również przekazywany kod statusu "
"HTTP, który został napotkany. Odniesienie do kodów statusu HTTP dla API "
"Twittera można znaleźć na stronie https://developer.twitter.com/en/"
"support/twitter-api/error-troubleshooting."

#: ../../streaming.rst:99
msgid ""
":meth:`Stream.on_exception` is called when an unhandled exception "
"occurs. This is fatal to the stream, and by default, an exception is "
"logged."
msgstr ""
":meth:`Stream.on_exception` jest wywoływany, gdy wystąpi nieobsługiwany "
"wyjątek. Jest to fatalne dla strumienia, a domyślnie wyjątek jest "
"rejestrowany."
